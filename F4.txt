Многозадачность - это свойство операционной системы, позволяющее выполнять несколько задач одновременно. Классификация многозадачности включает в себя:

Приоритетная многозадачность: Задачи выполняются в соответствии с их приоритетами. Задача с более высоким приоритетом выполняется до завершения, прежде чем задача с более низким приоритетом может начать выполнение1.
Кооперативная многозадачность: Задача, которая в настоящее время контролирует процессор, должна предложить процессор другой задаче, прежде чем она сможет запуститься1.
Достоинства и недостатки приоритетной многозадачности:

Достоинства: Эффективное использование ресурсов, поскольку задачи с более высоким приоритетом выполняются в первую очередь1.
Недостатки: Может возникнуть проблема голодания, когда задачи с низким приоритетом не получают достаточно времени процессора1.
Достоинства и недостатки кооперативной многозадачности:

Достоинства: Простота реализации, поскольку задачи сами контролируют, когда они должны быть приостановлены1.
Недостатки: Если одна задача занимает процессор слишком долго, другие задачи могут столкнуться с задержками1.
Процесс - это экземпляр программы, который выполняется на компьютереПоток - это подразделение процесса, который может выполняться параллельно с другими потоками в рамках одного процесса1. Отличие процесса от потока заключается в том, что процессы имеют отдельные адресные пространства, в то время как потоки разделяют адресное пространство своего родительского процесса1.

Переключение контекста - это процесс сохранения и восстановления состояния процесса или потока так, чтобы выполнение могло быть возобновлено с того же места позднее. Это позволяет одному процессору обрабатывать множество процессов или потоков, переключаясь между ними2.

Поведение std::thread::join относительно вызывающего потока выполнения Метод join() блокирует вызывающий поток до завершения потока, представленного этим экземпляром1. Если мы имеем несколько объектов потока, для которых идут вызовы метода join() подряд, то второй тоже запускается2.

Порядок и способ передачи аргументов потока В Си есть условно два способа передачи аргументов в функцию: по значению и по указателю. В C++ добавляется ещё один способ: по ссылке3. Однако, по факту везде передаётся по значению3.

Проблематика отсутствия защиты ресурсов с помощью критической секции В многопоточном окружении обычно более одного потока конкурируют за ресурсы4. Если критическая секция не защищена, это может привести к проблемам, таким как гонка данных4.

Мьютекс и семафор. Сравнение. Реализация Мьютекс — это механизм блокировки, тогда как семафор — это сигнальный механизм5. Мьютекс обеспечивает взаимное исключение, позволяя только одному потоку обращаться к общему ресурсу в каждый момент времени5.

Проблематика снятия блокировки после выхода из критической секции Если забыть освободить блокировку после выхода из критической секции, это может привести к проблемам, таким как взаимная блокировка или "deadlock"4.

Идиома RAII (Resource Acquisition Is Initialization): Это программная идиома, смысл которой заключается в том, что с помощью тех или иных программных механизмов получение некоторого ресурса неразрывно совмещается с инициализацией, а освобождение — с уничтожением объекта1. В RAII, удержание ресурса является инвариантом класса и связано с продолжительностью жизни объекта2.

Параллельные алгоритмы: Параллельные алгоритмы представляют собой алгоритмы, которые параллельно выполняют работу над коллекциями данных3. Они весьма важны ввиду постоянного совершенствования многопроцессорных систем и увеличения числа ядер в современных процессорах4. Однако, не все алгоритмы поддаются эффективному параллелизму. Например, большинство известных алгоритмов вычисления значения числа пи не допускают разбиения на параллельно выполняемые части4.

Benchmark: Бенчмарк – мощный инструмент для оптимизации и улучшения производительности кода. Он позволяет выявить узкие места и найти способы их оптимизации5.

Асинхронность: Асинхронность (от греч. α — отрицание, συν — вместе, χρονος — время) — не совпадение с чем-либо во времени; неодномоментность, неодновременность, несинхронность — характеризует процессы, не совпадающие во времени6.

GIL (Global Interpreter Lock): Глобальная блокировка интерпретатора — это механизм, обеспечивающий, при использовании интерпретатора CPython, безопасную работу с потоками7.

Горутина: Горутины — это легковесные потоки, которые реализуют конкурентное программирование в Go8.

Event Loop (Цикл событий): С помощью механизма Event Loop становится возможным выполнять асинхронный код в JavaScript9.

Deadlock: Deadlock — ситуация в многозадачной среде или СУБД, при которой несколько процессов находятся в состоянии бесконечного ожидания ресурсов, захваченных самими этими процессами10.

Примитивы синхронизации: Примитивы синхронизации нужны в любой многопоточной программе для обеспечения корректной работы с общими ресурсами11.

Присоединение потока, которому ранее был применен detach, приведет к тому, что создающий поток не продолжится, пока не завершится тот, к которому присоединились1. Это может вызвать задержки в выполнении основного потока, если присоединенный поток требует значительного времени для завершения.

Параллельные алгоритмы могут оптимизировать работу программ, но их эффективность зависит от конкретной задачи23. Например, алгоритм parallel_for в библиотеке параллельных шаблонов (PPL) может эффективно распределять итерации цикла между доступными вычислительными ресурсами2. Однако некоторые задачи, такие как вычисление числа пи или поиск в глубину на графах, не поддаются эффективному параллелизму3.

Benchmark - это инструмент для измерения производительности кода45. Он позволяет выявить узкие места и найти способы их оптимизации5.

Асинхронность - это не совпадение с чем-либо во времени; неодномоментность, неодновременность, несинхронность6. Это характеризует процессы, не совпадающие во времени6. Асинхронное программирование является очень мощным инструментом для оптимизации высоконагруженных программ с частым ожиданием системы7.

Потоки и асинхронность служат разным целям. Потоки позволяют выполнять несколько задач одновременно, в то время как асинхронность позволяет избежать блокировки выполнения программы при ожидании завершения долгих операций8.

Deadlock, или взаимная блокировка, - это ситуация в многозадачной среде или СУБД, при которой несколько процессов находятся в состоянии бесконечного ожидания ресурсов, захваченных самими этими процессами910.

Примитивы синхронизации, такие как мьютексы и семафоры, используются для координации работы между потоками, чтобы предотвратить условия гонки и обеспечить корректное взаимодействие11.

Горутины в Go - это легковесные потоки, которые реализуют конкурентное программирование1213. Они называются легковесными потоками, потому что они управляются рантаймом языка, а не операционной системой12.

Event loop, или цикл событий, - это механизм, который координирует работу трёх сущностей: стек вызовов, Web API и очередь колбэков14. Это позволяет выполнять асинхронный код в JavaScript14.

GIL, или Global Interpreter Lock, - это механизм, обеспечивающий безопасную работу с потоками при использовании интерпретатора CPython15.